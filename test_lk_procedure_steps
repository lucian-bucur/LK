01. NODE_SOURCE: (PREPARATION)
old_server="server1.test59.simplyspamfree.com"
new_server="server2.test59.simplyspamfree.com"
domain_name="example.com"
domain_table_name=$(env PYTHONPATH="/home/spamexperts/expire_log_data/:/home/spamexperts/expire_log_data/library.zip" python -c "import mx.records; print mx.records.mysql_table_name('${domain_name}')")

mysql mx_messages          -e "drop table     example_com;"
mysql mx_messages_outgoing -e "drop table     example_com;"
mysql mx_messages          -e "drop table old_example_com;"
mysql mx_messages_outgoing -e "drop table old_example_com;"

rm -rf /tmp/*example*; rm -rf /tmp/*logging*; rm -rf /tmp/*statistics*

/tmp/prep_server.sh
mysql filter -e "select logging_server,domain from relays"
mysql filter -e "update relays set logging_server='${old_server}' where logging_server='${new_server}' and domain='${domain_name}'"
mysql filter -e "select logging_server,domain from relays"
swaks -s localhost -t test@example.com
swaks -s localhost -t test@example.com

/home/spamexperts/expire_log_data/expire_log_data -d --skip-expire
/home/spamexperts/migrate_quarantine/migrate -d
/home/spamexperts/process_archive_queue/process_queue all -d
/home/spamexperts/process_index_queue/process_index_queue -d
/home/spamexperts/migrate_exim_data/migrate_exim_data -d
/home/spamexperts/expire_quarantine/expiry -d
/home/spamexperts/migrate_quarantine/migrate --spool-directory=/var/spool/secure-quarantine/ -d

mysql mx_messages          -e "show tables;"
mysql mx_messages_outgoing -e "show tables;"
mysql logging_local        -e "show tables;"

ls -ltr /var/lib/mysql/mx_messages | grep example_com

02. NODE_TARGET: (PREPARATION)
old_server="server1.test59.simplyspamfree.com"
new_server="server2.test59.simplyspamfree.com"
domain_name="example.com"
domain_table_name=$(env PYTHONPATH="/home/spamexperts/expire_log_data/:/home/spamexperts/expire_log_data/library.zip" python -c "import mx.records; print mx.records.mysql_table_name('${domain_name}')")

mysql mx_messages          -e "drop table     example_com;"
mysql mx_messages_outgoing -e "drop table     example_com;"
mysql mx_messages          -e "drop table old_example_com;"
mysql mx_messages_outgoing -e "drop table old_example_com;"

rm -rf /tmp/*example*; rm -rf /tmp/*logging*; rm -rf /tmp/*statistics*

mysql mx_messages          -e "show tables;"
mysql mx_messages_outgoing -e "show tables;"
mysql logging_local        -e "show tables;"

ls -ltr /var/lib/mysql/mx_messages | grep example_com

03. NODE_SOURCE = MASTER (TEST CASE):
logging_server=$(curl -k -X GET https://localhost:30443/master/relays/${domain_name}/logging_server | awk '{print $2}')

04. NODE_SOURCE:
domain_size_MYD=$(ls -lS /var/lib/mysql/mx_messages | grep MYD | grep ${domain_table_name} | awk '{print $5}')
domain_size_MYI=$(ls -lS /var/lib/mysql/mx_messages | grep MYI | grep ${domain_table_name} | awk '{print $5}')
domain_size=$(($domain_size_MYD + $domain_size_MYI))

ssh ${new_server} "echo $domain_size > /tmp/source_${domain_name}_size"

05. NODE_TARGET:
domain_size=$(cat /tmp/source_${domain_name}_size)
root_size=$(df -k / | tail -n 1 | awk '{print $4}')
condition=$(($domain_size + 15*1024*1024))

if (( $root_size > $condition )); then echo "root disk size is OK"; fi

06. NODE_SOURCE: (replication status)
check1=$(mysql -e 'show slave status \G;' | grep Last_Errno | awk '{print $2}')
check2=$(mysql -e 'show slave status \G;' | grep Seconds_Behind_Master | awk '{print $2}')

07. NODE_SOURCE = MASTER
mysql filter -e "update relays set logging_server='${old_server}' where logging_server='${new_server}' and domain='${domain_name}'"
mysql filter -e "select logging_server,domain from relays"

08. NODE_SOURCE: (rename tables)
mysql -e "RENAME TABLE  mx_messages.${domain_table_name} TO  mx_messages.old_${domain_table_name};"
mysql -e "RENAME TABLE  mx_messages_outgoing.${domain_table_name} TO  mx_messages_outgoing.old_${domain_table_name};"

09. NODE_SOURCE: (tables verification/count check)
# -------------------------------------------------------------------------------------------------------------------
sudo mysql -e "select count(*) from mx_messages.old_${domain_table_name}"
sudo mysql -e "select count(*) from mx_messages_outgoing.old_${domain_table_name}"

sudo mysql -e "select count(*) from logging_local.from_domains      where domain='${domain_name}'"
sudo mysql -e "select count(*) from logging_local.secure_email_log  where auth_domain='${domain_name}'"
sudo mysql -e "select count(*) from logging_local.unique_recipients where domain='${domain_name}'"
sudo mysql -e "select count(*) from logging_local.mailbox_usage     where domain='${domain_name}'"

10. NODE_SOURCE: (dumps/scp tables)

database=mx_messages
dump_table=old_${domain_table_name}
mysqldump $database ${dump_table}  --compact --skip-extended-insert --insert-ignore --complete-insert > /tmp/$database.${dump_table}.sql
scp /tmp/$database.${dump_table}.sql  ${new_server}:/tmp/$database.${domain_table_name}.sql

database=mx_messages_outgoing
dump_table=old_${domain_table_name}
mysqldump $database ${dump_table}  --compact --skip-extended-insert --insert-ignore --complete-insert > /tmp/$database.${dump_table}.sql
scp /tmp/$database.${dump_table}.sql  ${new_server}:/tmp/$database.${domain_table_name}.sql

mysql -Ne "use logging_local; show tables" | xargs -I{} sh -c "mysqldump logging_local {} --skip-extended-insert --insert-ignore --complete-insert --where=\"domain='${domain_name}'\"" > /tmp/logging_local.dumps.sql
scp /tmp/logging_local.dumps.sql ${new_server}:/tmp/logging_local.dumps.sql


11. NODE_TARGET: (import tables)

database=mx_messages
sed -i "s/old_${domain_table_name}/${domain_table_name}/g" /tmp/$database.${domain_table_name}.sql
mysql -e "CREATE DATABASE IF NOT EXISTS $database"
mysql $database < /tmp/$database.${domain_table_name}.sql

database=mx_messages_outgoing
sed -i "s/old_${domain_table_name}/${domain_table_name}/g" /tmp/$database.${domain_table_name}.sql
mysql -e "CREATE DATABASE IF NOT EXISTS $database"
mysql $database < /tmp/$database.${domain_table_name}.sql

mysql logging_local < /tmp/logging_local.dumps.sql

mysql mx_messages          -e "show tables;"
mysql mx_messages_outgoing -e "show tables;"
mysql logging_local        -e "show tables;"

12. NODE_TARGET: (tables verification/count check)
# -------------------------------------------------------------------------------------------------------------------
sudo mysql -e "select count(*) from mx_messages.${domain_table_name}"
sudo mysql -e "select count(*) from mx_messages_outgoing.${domain_table_name}"

sudo mysql -e "select count(*) from logging_local.from_domains      where      domain='${domain_name}'"
sudo mysql -e "select count(*) from logging_local.secure_email_log  where auth_domain='${domain_name}'"
sudo mysql -e "select count(*) from logging_local.unique_recipients where      domain='${domain_name}'"
sudo mysql -e "select count(*) from logging_local.mailbox_usage     where      domain='${domain_name}'"

# MIGRATE STATISTICS: NODE_SOURCE
#
# mysql -Ne "use statistics; show tables" | xargs -I{} sh -c "mysqldump statistics {} --skip-extended-insert --insert-ignore --complete-insert --where=\"domain='${domain_name}'\"" > /tmp/statistics.dumps.sql
# scp /tmp/statistics.dumps.sql  ${new_server}:/tmp/statistics.dumps.sql
#
# MIGRATE STATISTICS: NODE_TARGET
#
# mysql -e "CREATE DATABASE IF NOT EXISTS _statistics"
# mysql _statistics < /tmp/statistics.dumps.sql
# mysql -Ne "use statistics; show tables" | xargs -I{} sh -c "echo; echo TABLE={}; mysql statistics -e \"desc {}; select * from {} where null; \""

13. NODE_SOURCE (DROP)

drop_table=old_${domain_table_name}
sudo mysql mx_messages          -e "DROP TABLE ${drop_table};"
sudo mysql mx_messages_outgoing -e "DROP TABLE ${drop_table};"

14. NODE_SOURCE = MASTER: (purge old archive from node source)

active=$(curl -k -X GET https://localhost:30443/master/archive/options/${domain_name}/active)

cat > /tmp/remove_index.py << CODE
import sys
import time

sys.path.insert(2, "/home/spamexperts/archive_tasks/")
sys.path.insert(3, "/home/spamexperts/archive_tasks/library.zip")
from archive.tasks import purge_index

domain_name=sys.argv[1]
start = 0
end = int(time.time())
purge_index(domain_name, start, end, 'spamexperts_rt')
CODE

if [ $active == 1 ]; then
    python /tmp/remove_index.py ${domain_name}
fi

15. NODE_TARGET: (rebuild archive real time index on source target)

date="24/07/2019"
base="01/01/1990"

date_unix_time=$(date -j -f "%d/%m/%Y" $date +%s)
base_unix_time=$(date -j -f "%d/%m/%Y" $base +%s)
