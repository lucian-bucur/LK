---
# 1. determine source_server (where the domain is located)
- hosts: access.seinternal.com
  gather_facts: no
  vars_files:
    group_vars/vars.yml
  tasks:
    - name: "Get master server"
      get_servers_with_role:
        host: "{{ old_server }}"
        role: master
      register: master
    - debug: var=master.meta[0]

    - name: "Check the logging domain server"
      include: tasks/check_logging_domain_server.yml
      register: check_logging_domain_server
      with_items:
        - "{{ domains }}"

# 2. ssh authorization (source_server to destination_server)
- import_playbook: ssh_authorize.yml
  vars:
    source: "{{ new_server }}"
    destination: "{{ old_server }}"

# 3. check if archiving is enabled for the domain and if is the case purge old archive from the old logging server
- hosts: access.seinternal.com
  gather_facts: no
  vars_files:
    group_vars/vars.yml
  tasks:
    - name: "Purge archive index from old logging server"
      include: tasks/purge_archive_index.yml
      register: purge_archive_index
      with_items:
        - "{{ domains }}"

# 4. set source_server & target_server to maintenance
- hosts: access.seinternal.com
  gather_facts: no
  tasks:
    - name: "Add zabbix maintenance"
      local_action:
        module: zabbix_maintenance
        name: "Logging domain migration to {{ new_server }}"
        host_names:
          - "{{ old_server }}"
          - "{{ new_server }}"
        state: present
        collect_data: False
        server_url: https://monitor.seinternal.com
        login_user: "{{ zabbix_user }}"
        login_password: "{{ zabbix_password }}"

# 5. stop services on source_server
- hosts: "{{ old_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: Flush MySQL Tables
      command: mysqladmin flush-tables
    - name: Stop services
      service:
        name: "{{ item }}"
        state: stopped
      loop:
        - logging_tasks
        - logging_scheduled
        - mysql

# 6. migrate logging storage for a domain between servers
- hosts: "{{ new_server }}"
  become: true
  gather_facts: no
  vars_files:
    group_vars/vars.yml
  tasks:
    - name: "Check the server roles"
      include: tasks/migrate_logging_domain.yml
      register: migrate_logging_domain
      with_items:
        - "{{ domains }}"

# 7. update filter table for target_server
- hosts: "{{ new_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: mysql filter table update on relays
      command: mysql filter -e "update relays set logging_server='{{ new_server }}' where logging_server='{{ old_server }}'"

    - name: Repair transferred tables
      command: "mysqlcheck --auto-repair {{ item}}"
      loop:
        - mx_messages
        - mx_messages_outgoing

# 8. start services on source_server
- hosts: "{{ old_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: Start services
      service:
        name: "{{ item }}"
        state: started
      loop:
        - mysql
        - logging_scheduled
        - logging_tasks

# 9. remove zabbix maintenance for source_server & target_server
- hosts: access.seinternal.com
  gather_facts: no
  tasks:
    - name: "Remove zabbix maintenance"
      local_action:
        module: zabbix_maintenance
        name: "Logging domain migration to {{ new_server }}"
        host_names:
          - "{{ old_server }}"
          - "{{ new_server }}"
        state: absent
        server_url: https://monitor.seinternal.com
        login_user: "{{ zabbix_user }}"
        login_password: "{{ zabbix_password }}"

# 10. rebuild index on new logging server
- hosts: access.seinternal.com
  gather_facts: no
  tasks:
    - name: "Create rebuild_index script"
      template:
        src: templates/rebuild_index.sh.j2
        dest: /tmp/rebuild_index.sh
        mode: "a+x"
      delegate_to: "{{ master.meta[0] }}"
    - name: "rebuild archive index from the new logging server"
      command: /tmp/rebuild_index.sh
      when: active.stdout == 1
      delegate_to: "{{ master.meta[0] }}"















