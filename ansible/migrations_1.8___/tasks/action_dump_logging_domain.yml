---
- name:  "register domain name"
  set_fact:
    domain_name: "{{ item }}"
- name: "Register table name (depends on domain name)"
  set_fact:
    table: "{{ domain_name | replace('.','_') | replace('-','@002d') }}"

- name: register logging_server
  set_fact:
     logging_server: "{{ hostvars['access.seinternal.com']['logging_filters'][domain_name] }}"
- debug: var=logging_server

- name: "mysql check table backup existence"
  command: mysql -e "SHOW TABLES LIKE 'old_{{ table }}';" "mx_messages"
  register: existence_table_backup

- name: "mysql dump table {{ table }} for domain {{ domain_name }} for inmess"
  shell: "mysqldump mx_messages old_{{ table }}  --compact --skip-extended-insert --insert-ignore > /tmp/old_{{ table }}.inmess.sql"
  when: logging_server == old_server and existence_table_backup.stdout != ''

- name: "mysql dump table {{ table }} for domain {{ domain_name }} for outmess"
  shell: "mysqldump mx_messages_outgoing old_{{ table }}  --compact --skip-extended-insert --insert-ignore > /tmp/old_{{ table }}.outmess.sql"
  when: logging_server == old_server and existence_table_backup.stdout != ''

- name: check if inmess dump file exists
  stat:
    path: "/tmp/old_{{ table }}.inmess.sql"
  register: backup_table_inmess

- name: check if outmess dump file exists
  stat:
    path: "/tmp/old_{{ table }}.outmess.sql"
  register: backup_table_outmess

- debug: var=backup_table_inmess.stat.exists
- debug: var=backup_table_outmess.stat.exists

- name: "scp inmess dump file to the new_server"
  command: scp -o StrictHostKeyChecking=no "/tmp/old_{{ table }}.inmess.sql" "{{ new_server}}":"/tmp/{{ table }}.inmess.sql"
  when: logging_server == old_server and backup_table_inmess.stat.exists == true

- name: "scp outmess dump file to the new_server"
  command: scp -o StrictHostKeyChecking=no "/tmp/old_{{ table }}.outmess.sql" "{{ new_server}}":"/tmp/{{ table }}.outmess.sql"
  when: logging_server == old_server and backup_table_outmess.stat.exists == true



###############
# /etc/spamexpewrts/cluster.conf
