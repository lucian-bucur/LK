---
# 1. check the logging domain server
- hosts: access.seinternal.com
  vars:
    logging_filters: {}
    archive_options: {}
  tasks:
    - name: "Get master server"
      get_servers_with_role:
        host: "{{ old_server }}"
        role: master
      register: master
    - debug: var=master.meta[0]

    - name: "Check the logging domain server for all the domains"
      include: tasks/check_logging_domain_server.yml
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"

    - debug: var=logging_filters

# 2. check that the new_server has sufficient space (10 Gb + domain size) to accommodate domain logging data
- hosts: "{{ old_server }}"
  vars:
      domains_sizes: {}
  tasks:
    - name: "Check the domain sizes for all the domains"
      include: tasks/check_domain_size.yml
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"

# 3. check the prereqs conditions on the server target before logging domain migration
- hosts: "{{ new_server }}"
  tasks:
    - name: "Check the prereqs conditions for all the domains"
      include: tasks/check_logging_domain_prereqs.yml
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"

# 4. ssh authorization (source_server to destination_server)
- import_playbook: ssh_authorize.yml
  vars:
    source: "{{ new_server }}"
    destination: "{{ old_server }}"

# 5. Permanently change the table on the old location to read-only, so it cannot receive new data
- hosts: "{{ old_server }}"
  tasks:
  - name: "Change table before migration permission for all the domains"
    include: tasks/change_table_before_migration_permission.yml
    with_items:
      - "{{ domains.split(',') | replace(' ', '') }}"


# 6. ssh authorization (source_server to destination_server)
- import_playbook: ssh_authorize.yml
  vars:
    source: "{{ old_server }}"
    destination: "{{ new_server }}"

# 7. Dump the old data (with INSERT IGNORE and without dropping any data that may exist already), and import it on the new location
- hosts: "{{ old_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: "Action dump logging domain on the source server for all the domains"
      include: tasks/action_dump_logging_domain.yml
      register: action_dump_logging_domain
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"

# 8. Import the old data on the new location
- hosts: "{{ new_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: "Action import logging domain on the target server for all the domains"
      include: tasks/action_import_logging_domain.yml
      register: action_import_logging_domain
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"


# 9. validation migration on old_server
- hosts: "{{ old_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: "Validation migration on source server for all the domains"
      include: tasks/validation_migration.yml
      register: source_validation_migration
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"

# 10. validation migration on old_server
- hosts: "{{ new_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: "Validation migration on target server for all the domains"
      include: tasks/validation_migration.yml
      register: target_validation_migration
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"

# 11. update filter table for target_server
- hosts: access.seinternal.com
  gather_facts: no
  tasks:
    - name: "Update filter table on relays for all the domains"
      include: tasks/update_filter_relays_logging_server.yml
      register: update_filter_relays_logging_server
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"

# 12. Permanently change the table on the old location to read-only, so it cannot receive new data
- hosts: "{{ old_server }}"
  tasks:
  - name: "Change table after migration_permission for all the domains"
    include: tasks/change_table_after_migration_permission.yml
    with_items:
      - "{{ domains.split(',') | replace(' ', '') }}"

# 13. check archive options
- hosts: access.seinternal.com
  vars:
    archive_options: {}
  tasks:
    - name: "Check the archive options for all the domains"
      include: tasks/check_archive_options.yml
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"

    - debug: var=archive_options

# 14. check if archiving is enabled for the domain and if is the case purge old archive from the old logging server
- hosts: "{{ old_server }}"
  gather_facts: no
  tasks:
    - name: "Purge archive index from old logging server for all the domains"
      include: tasks/purge_archive_index.yml
      register: purge_archive_index
      with_items:
        - "{{ domains.split(',') | replace(' ', '') }}"
