---

- hosts: "{{ new_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: Copy migrate logging script.
      template:
        src: templates/migrate_logging.j2
        dest: /root/migrate_logging.sh
        mode: "a+x"
    - name: Pre Sync
      command: /root/migrate_logging.sh

- hosts: access.seinternal.com
  become: true
  gather_facts: no
  tasks:
    - name: "Update Cluster Config"
      change_logging_server:
        old_server: "{{ old_server }}"
        new_server: "{{ new_server }}"
      register: output
    - debug: var=output

- hosts: "{{ new_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: License and Configuration Update
      command: python /home/spamexperts/update_updater.py ; /home/spamexperts/update/update -d --skip-version-check --skip-apt --skip-restart --skip-software-cache --skip-applications --skip-pip --skip-pip-cache --skip-preupdate --skip-postupdate --skip-preupdate-migrations --skip-postupdate-migrations --skip-salt --skip-wait-turn

- hosts: "{{ old_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: Stop services
      service:
        name: "{{ item }}"
        state: stopped
      loop:
        - logging_tasks
        - logging_scheduled
        - sphinxsearch

    - name: Flush MySQL Tables
      command: mysqladmin flush-tables

### !!!! Stop migrate_exim_data process on all servers of the cluster: pkill -f migrate_exim_data
# does need to be stopped on all servers in cluster.
# Zabbix maint & stop mysql instead ^^^

- hosts: "{{ old_server }}:{{ new_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: Kill migrate exim data with fire
      command: pkill -f migrate_exim_data


# ^^^^^^  Investigate

- hosts: "{{ new_server }}"
  become: true
  gather_facts: no
  tasks:
    - name: Final migration
      command: /root/migrate_logging.sh

### Update /etc/spamexperts/records.conf and in the [mysql] section set the host to the new logging server's hostname.
# ^^^^^ run license config updater instead

    - name: mysql filter table update
      command: mysql filter -e "update relays set logging_server='{{ new_server }}' where logging_server='{{ old_server }}'"

# put in template

    - name: Repair transferred tables
      command: "mysqlcheck --auto-repair {{ item}}"
      loop:
        - mx_messages
        - mx_messages_outgoing
        - logging_local

- hosts: "{{ old_server }}"
  become: true
  gather_facts: no
  tasks:
### This might be able to be placed above after stopping services
    - name: Clean-up Logging App
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /home/spamexperts/expire_log_data
        - /home/spamexperts/logging_api
        - /home/spamexperts/logging_api_wrapper.py
        - /home/spamexperts/expire_statistics.py
        - /home/spamexperts/truncate_unique_recipients.sh
        - /etc/uwsgi/apps/logging.ini
      tags: ['never', 'cleanup' ]
