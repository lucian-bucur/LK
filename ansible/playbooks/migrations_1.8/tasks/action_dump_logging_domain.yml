---
- name:  "register domain name"
  set_fact:
    domain_name: "{{ item }}"
- name: "Register table name (depends on domain name)"
  set_fact:
    table: "{{ domain_name | replace('.','_') | replace('-','@002d') }}"

- name: register logging_server
  set_fact:
     logging_server: "{{ hostvars['access.seinternal.com']['logging_filters'][domain_name] }}"
- debug: var=logging_server

# BEFORE MIGRATION: CHECK TABLES EXISTENCE
# -------------------------------------------------------------------------------------------------------------
- name: "mysql check table existence on mx_messages"
  command: mysql -e "SHOW TABLES LIKE 'old_{{ table }}';" "mx_messages"
  register: existence_old_table_on_mx_messages

- name: "mysql check table existence on mx_messages_outgoing"
  command: mysql -e "SHOW TABLES LIKE 'old_{{ table }}';" "mx_messages_outgoing"
  register: existence_old_table_on_mx_messages_outgoing

# BEFORE MIGRATION: VALIDATION
# -------------------------------------------------------------------------------------------------------------
- name: "mysql check count(*) for mx_messages.old_{{ table }} for domain {{ domain_name }} before migration"
  command: mysql -e "select count(*) from mx_messages.old_{{ table }}"
  register: records_count
  when: logging_server == old_server and existence_old_table_on_mx_messages.stdout != ''

- name: "register validation count(*) for mx_messages.old_{{ table }} before migration"
  vars:
       database_table: "mx_messages.old_{{ table }}"
  set_fact:
      count_tables: "{{ count_tables | combine({ database_table : records_count.stdout_lines[1] }) }}"
  when: records_count.stdout != ''

- name: "mysql check count(*) for mx_messages_outgoing.old_{{ table }} for domain {{ domain_name }} before migration"
  command: mysql -e "select count(*) from mx_messages_outgoing.old_{{ table }}"
  register: records_count
  when: logging_server == old_server and existence_old_table_on_mx_messages_outgoing.stdout != ''

- name: "register validation count(*) for mx_messages_outgoing.old_{{ table }} before migration"
  vars:
       database_table: "mx_messages_outgoing.old_{{ table }}"
  set_fact:
      count_tables: "{{ count_tables | combine({ database_table : records_count.stdout_lines[1] }) }}"
  when: records_count.stdout != ''

- name: "mysql check count for logging_local.from_domains for domain {{ domain_name }} before migration"
  command: mysql -e "select count(*) from logging_local.from_domains where domain='{{ domain_name }}'"
  register: records_count

- name: "register validation count(*) for logging_local.from_domains before migration"
  vars:
       database_table: "logging_local.from_domains"
  set_fact:
      count_tables: "{{ count_tables | combine({ database_table : records_count.stdout_lines[1] }) }}"
  when: records_count.stdout != ''

- name: "mysql check count for logging_local.secure_email_log for domain {{ domain_name }} before migration"
  command: mysql -e "select count(*) from logging_local.secure_email_log where auth_domain='{{ domain_name }}'"
  register: records_count

- name: "register validation count(*) for logging_local.secure_email_log before migration"
  vars:
       database_table: "logging_local.secure_email_log"
  set_fact:
      count_tables: "{{ count_tables | combine({ database_table : records_count.stdout_lines[1] }) }}"
  when: records_count.stdout != ''

- name: "mysql check count for logging_local.unique_recipients for domain {{ domain_name }} before migration"
  command: mysql -e "select count(*) from logging_local.unique_recipients where domain='{{ domain_name }}'"
  register: records_count

- name: "register validation count(*) for logging_local.unique_recipients before migration"
  vars:
       database_table: "logging_local.unique_recipients"
  set_fact:
      count_tables: "{{ count_tables | combine({ database_table : records_count.stdout_lines[1] }) }}"
  when: records_count.stdout != ''

- name: "mysql check count for logging_local.mailbox_usage for domain {{ domain_name }} before migration"
  command: mysql -e "select count(*) from logging_local.mailbox_usage where domain='{{ domain_name }}'"
  register: records_count

- name: "register validation count(*) for logging_local.mailbox_usage before migration"
  vars:
       database_table: "logging_local.mailbox_usage"
  set_fact:
      count_tables: "{{ count_tables | combine({ database_table : records_count.stdout_lines[1] }) }}"
  when: records_count.stdout != ''

# BEFORE MIGRATION: DUMP TABLES
# -------------------------------------------------------------------------------------------------------------
- name: "mysql dump table old_{{ table }} for domain {{ domain_name }} for inmess"
  shell: "mysqldump mx_messages old_{{ table }}  --compact --skip-extended-insert --insert-ignore --complete-insert > /tmp/mx_messages.old_{{ table }}.inmess.sql"
  when: logging_server == old_server and existence_old_table_on_mx_messages.stdout != ''

- name: "mysql dump table old_{{ table }} for domain {{ domain_name }} for outmess"
  shell: "mysqldump mx_messages_outgoing old_{{ table }}  --compact --skip-extended-insert --insert-ignore --complete-insert > /tmp/mx_messages_outgoing.old_{{ table }}.outmess.sql"
  when: logging_server == old_server and existence_old_table_on_mx_messages_outgoing.stdout != ''

- name: "mysql dump tables from logging_local database for domain {{ domain_name }}"
  shell: mysql -Ne "use logging_local; show tables" | egrep -v "alembic_version|hidden_messages|secure_email_log" | xargs -I{} sh -c "mysqldump logging_local {} --skip-extended-insert --insert-ignore --complete-insert --where=\"domain='{{domain_name}}'\"" > /tmp/logging_local.dumps.sql
  when: logging_server == old_server

# BEFORE MIGRATION: CHECK DUMP FILES EXISTENSE
# -------------------------------------------------------------------------------------------------------------
- name: "check if inmess dump file for table old_{{ table }} exists"
  stat:
    path: "/tmp/mx_messages.old_{{ table }}.inmess.sql"
  register: backup_table_inmess

- name: "check if outmess dump file for table old_{{ table }} exists"
  stat:
    path: "/tmp/mx_messages_outgoing.old_{{ table }}.outmess.sql"
  register: backup_table_outmess

- name: "check if logging_local.dumps.sql dump file exists"
  stat:
    path: "/tmp/logging_local.dumps.sql"
  register: backup_logging_local_dumps

# BEFORE MIGRATION: SSH
# --------------------------------------------------------------------------------------------------
- name: "scp inmess dump_file_(*.inmess.sql) to the new_server"
  command: scp -o StrictHostKeyChecking=no "/tmp/mx_messages.old_{{ table }}.inmess.sql" "{{ new_server}}":"/tmp/mx_messages.{{ table }}.inmess.sql"
  when: logging_server == old_server and backup_table_inmess.stat.exists == true

- name: "scp outmess dump_file_(*.outmess.sql) to the new_server"
  command: scp -o StrictHostKeyChecking=no "/tmp/mx_messages_outgoing.old_{{ table }}.outmess.sql" "{{ new_server}}":"/tmp/mx_messages_outgoing.{{ table }}.outmess.sql"
  when: logging_server == old_server and backup_table_outmess.stat.exists == true

- name: "scp dump_file_(logging_local.dumps) to the new_server"
  command: scp -o StrictHostKeyChecking=no "/tmp/logging_local.dumps.sql" "{{ new_server}}":"/tmp/logging_local.dumps.sql"
  when: logging_server == old_server and backup_logging_local_dumps.stat.exists == true
